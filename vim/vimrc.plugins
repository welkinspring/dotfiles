" vim plugins sumarizes.

call plug#begin('~/.vim/plugged')
" language releated
Plug 'scrooloose/syntastic'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'xuyuanp/nerdtree-git-plugin'
Plug 'tomtom/tcomment_vim'
Plug 'elzr/vim-json'
Plug 'bronson/vim-trailing-whitespace'
Plug 'klen/python-mode'
Plug 'lervag/vimtex'

" completion
"Plug 'valloric/youcompleteme'
Plug 'honza/vim-snippets'
Plug 'ervandew/supertab'
Plug 'sirver/ultisnips'
Plug 'raimondi/delimitmate'
Plug 'vim-scripts/taglist.vim'

" code display
Plug 'nathanaelkane/vim-indent-guides'
Plug 'flazz/vim-colorschemes'
Plug 'tomasr/molokai'
Plug 'kien/rainbow_parentheses.vim'
Plug 'nanotech/jellybeans.vim'



" new
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'powerline/powerline'
Plug 'kien/ctrlp.vim'
Plug 'majutsushi/tagbar'
Plug 'brookhong/cscope.vim'
Plug 'vim-scripts/DoxygenToolkit.vim'
Plug 'tpope/vim-fugitive'                       " a git wrapper so awesome.
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'junegunn/seoul256.vim'
Plug 'airblade/vim-gitgutter'
Plug 'easymotion/vim-easymotion'
Plug 'vim-scripts/L9'
"Plug 'tomtom/tlib_vim'                         " Tjumps that lets users filter and select items from the jump list.
"Plug 'garbas/vim-snipmate'                      " aims to provide support for textual snippets, such as for<tab> will extract for(i=0;...
"Plug 'edsono/vim-matchit'
Plug 'kristijanhusak/vim-multiple-cursors'
Plug 'henrik/vim-indexed-search'
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  }
Plug 'junegunn/fzf.vim'
Plug 'vim-scripts/cfname' " - shows or jumps the c prototype of the function the cursor is in.





" markdown pre-review setup
Plug 'godlygeek/tabular'
Plug 'tpope/vim-markdown'
Plug 'suan/vim-instant-markdown' " please take care for this plugin needs node.js and npm to support, @see details.
" guidance of details:
" 	git clone git://github.com/npm/npm.git
" 	cd npm
" 	make install
" 	sudo npm -g install instant-markdown-d
" 	then add vim-instant-markdown plugin in this config

" color scheme
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'altercation/vim-colors-solarized'

call plug#end()


" vim plugins configuration

" ### syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" ### nerdtree
" this will open NERDTree automatically when vim starts up if no files were specified, say type vim . with local.
autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" close vim if the only window left open is a NERTree.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" nerdtree quick find which not recommend to use / search gg G to move faster.
nnoremap <silent> <Leader>v :NERDTrFind,CR>
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
" let g:NERDTreeShowHidden = 1 #NERD shortcut alt + i
" automatically delete the buffer of the file you just deleted with NerdTree
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" different highlighting for different file extensions
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
	exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
	exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction
call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

map <F2> :NERDTreeToggle<CR>

" ### nerdcommenter
" guidance for the using:
" --------------------------------------------------
" 	5,cc	: comment 5 lines one by one
" 	5,cu	: uncomment 5 lines
" 	5,cm	: comment 5 lines one time
" 	,cA	: instert /* */ and enter insert mode
" ---------------------------------------------------
" add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" ### nerdtree-git-plugin'
" vim script
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }


" --- Plug tiagofumo/vim-nerdtree-syntax-highlight
" --- Plug ryanoasis/vim-devicons
" --- Plug ryanoasis/nerd-fonts
" NERDTree different highlighting and icons for different file extensions.
" This plugin is intended to be used with vim-devicons and to use it you will
" need to add a new font from nerd-fonts to your machine so you can see the
" icons when using vim. TBD
set shell=bash\ -i

" --- Plug 'vim-airline/vim-airline'
" --- Plug 'vim-airline/vim-airline-themes'
function! AirlineInit()
	let g:airline_section_a = airline#section#create(['mode',' ','branch'])
	let g:airline_section_b = airline#section#create_left(['ffenc','hunks','%f'])
	let g:airline_section_c = airline#section#create(['filetype'])
	let g:airline_section_x = airline#section#create(['%P'])
	let g:airline_section_y = airline#section#create(['%B'])
	let g:airline_section_z = airline#section#create(['%l','%c'])
endfunction
autocmd VimEnter * call AirlineInit()
" Smarter tab line automatically displays all buffers.
" Separators can be configured independently for the tabline, so here is how you can define straight.
let g:airline_theme='bubblegum'
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
"let g:airline_powerline_fonts=1
"let g:airline#extensions#tabline#buffer_nr_show = 1
"let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'


" --- Plug 'kien/ctrlp.vim'
let g:ctrlp_working_path_mode = ''
let g:ctrlp_max_height=20
let g:ctrlp_regexp = 1
nnoremap <silent> <C-p> :ClearAllCtrlPCache<CR>:CtrlP<CR>
nnoremap <silent> <c-x><C-p> :ClearAllCtrlPCache<CR>:CtrlPRoot<CR>

" --- Plug 'majutsushi/tagbar'
nmap <F4> :TagbarToggle<CR>


" --- Plug 'brookhong/cscope.vim'
"set tags=""
"set cscopetag
"set csto=0
"set cscopeverbose
"set cscopequickfix=""
"let g:cscope_silent = 1
"let g:cscope_open_location = 0
"let g:cscope_interested_files = '\.c$\|\.h$'

" a: Find this and let me select the mode
" s: Find this C symbol
" g: Find this definition
" d: Find functions called by this function
" c: Find functions calling this function
" t: Find this text string
" e: Find this egrep pattern
" f: Find this file
" i: Find files #including this file
"nmap <C-\>a :call CscopeFindInteractive(expand('<cword>'))<CR>
"nmap <C-\>s :call CscopeFind('s', expand('<cword>'))<CR>
"nmap <C-\>g :call CscopeFind('g', expand('<cword>'))<CR>
"nmap <C-\>d :call CscopeFind('d', expand('<cword>'))<CR>
"nmap <C-\>c :call CscopeFind('c', expand('<cword>'))<CR>
"nmap <C-\>t :call CscopeFind('t', expand('<cword>'))<CR>
"nmap <C-\>e :call CscopeFind('e', expand('<cword>'))<CR>
"nmap <C-\>f :call CscopeFind('f', expand('<cword>'))<CR>
"nmap <C-\>i :call CscopeFind('i', expand('<cword>'))<CR>

"map <silent><F10> :let &cscopequickfix=(&cscopequickfix == ""?"s-,g-,d-,c-,t-,e-,f-,i-":"")<CR>:call ShowCscopeMode()<CR>
"function ShowCscopeMode()
"	if (&cscopequickfix == "")
"		echo "cscopequickfix disable"
"	else
"		echo "cscopequickfix enable"
"	endif
"endfunction


" --- Plug 'mhinz/vim-startify'
" let g:startify_custom_header=[
"             \'   F2  NERTree 开关',
"             \'   F4  Tagbar 开关',
"             \'   F6  excute vimgrep',
"             \'   F7  插入函数注释',
"             \'   F9  save vim session',
"             \'   F10 cscopequickfix开关 (供cscope选择index)',
"             \'   F11 paste/nomal模式切换',
"             \'   F12 鼠标vim/xterm模式切换',
"             \'   ',
"             \'   C-p 打开当前dir下的文件',
"             \'   C-t 新建termital',
"             \'   C-f 模糊搜索所有打开的buffer',
"             \'   ',
"             \'   [n],cm 光标以下count行尝注释掉(7,cm)',
"             \'   [n],cu 光标以下count行逐行取消注释(7,cu)',
"             \'   ,cA 在行尾插入 /* */,并且进入插入模式。',
"             \'   ',
"             \'   Alt + 方向键 切换窗口',
"             \'   Alt + -= 左右移动buffer',
"             \'   zR 打开折叠',
"             \'   ',
"             \'                         ']


" --- Plug 'vim-scripts/DoxygenToolkit.vim'
let g:DoxygenToolkit_briefTag_pre="@brief "
let g:DoxygenToolkit_paramTag_pre="@Param "
let g:DoxygenToolkit_returnTag="@return "
let g:DoxygenToolkit_authorName="Jeff Cheng <welkinspring@163.com>"
let g:DoxygenToolkit_briefTag_funcName="yes"
let g:doxygen_enhanced_color=1
nnoremap <silent><F7> :Dox<CR>
inoremap <silent><F7> <esc>:Dox<CR>:<BS>i

" --- plugins themes and colors.
" --- Plug altercation/vim-colors-solarized
syntax enable
set background=dark
let g:solarized_termtrans = 1
colorscheme solarized
" togglebg#map("<F5>")


" --------------------------------------------------------------
" vim personal others shortcut key configuration.
" --------------------------------------------------------------
" --- use Alt + Num to switch buffer, C-c to close buffer.
"if ! hasmapto('') || !hasmapto('<M-1>')
	"NORMAL mode bindings for vim( terminal)
"	noremap <unique> <script> :bn<CR>
"	noremap <unique> <script> :bp<CR>
"	noremap <C-c> :bd<CR>

	"INSERT mode bindings for vim(terminal)
"	inoremap <unique> <script> <esc>:bn<CR>:<BS>i
"	inoremap <unique> <script> <esc>:bp<CR>:<BS>i
"	inoremap <C-c> <esc>:bd<CR>:<BS>i
"endif





" ### tcomment


" ### vim-markdown
set shell=bash\ -i
" TODO...

" ### elzr/vim-json


" ### vim-trailing-whitespace
" Plug 'klen/python-mode'
" Plug 'lervag/vimtex'

" ###
" ###
" ###
" ###
" ###
" ###
" ###
" ###
" ###
" ###
" ###
" ###
